

数据存储原理：
	1，数据存储的地方？
		内存（缓存）， 硬盘（持久化/永久存储）
	
	2，数据的表示形式：
		数字
		中文
		英文
		文件
		图片
		视频
		音乐
		...
	
	3, 数据是以二进制存储：
		为什么要使用二进制
			硬盘只能存储0和1，
		
		举例：
			
			每个0或1 比作一个开关 ， 把8个开关放在一个房间， 这个房间就是一个字节,
			每个字节都有一房间编号， 这个房间编号可以比作一个内存地址，
			
			多个字节在一块，把多个房间打通，
			把所有房间可以比喻成一栋楼，整个内存条 
			
		
		存储一个文件：10GB
			1bit = 0或1
			1byte = 8bit
			1kb = 1024byte  
			1MB = 1024KB
			1GB = 1024MB
			1TB = 1024GB
			..1PB, 1EB, .. 1DB...
			
		程序员节：10月24日
		
	4，进制
		十进制： 0-9, 逢10进1
		二进制： 0-1，逢2进1
		八进制： 0-7，逢8进1
		十六进制： 0-9-A-F, 逢16进1
		
		
		进制转换：
			
		二进制和十进制之间的转换：
			
			十进制转二进制：
				53 = 32 + 16 + 4 +1 = 110101
				倒除法
				
				521 : 1=10^0
				512 : 1=10^1
				152 : 1=10^2
				
				152 = 1*10^2 + 5*10^1 + 2*10^0 = 100+50+2
			
			二进制转十进制：
				11010 = 1*2^1 + 1*2^3 + 1*2^4 = 2+8+16 = 26
		
				2^0 = 1      
				2^1 = 2
				2^2 = 4
				2^3 = 8
				2^4 = 16
				2^5 = 32
				2^6 = 64
				2^7 = 128
				2^8 = 256
				2^9 = 512
				2^10 = 1024

		
		二进制和八进制之间的转换：
			二进制转八进制：
				011 010 = 3 2 = 32(八进制, 032)
		
					000  = 0
					001  = 1
					010  = 2
					011  = 3
					100  = 4
					101  = 5
					110  = 6
					111  = 7
			八进制转二进制：
				32 = 011 010 = 11010
		
		二进制和十六进制之间的转换：
			二进制转十六进制：
				0110 1010 = 6A(十六进制, 0x6A)
		
					0000  = 0
					0001  = 1
					0010  = 2
					0011  = 3
					0100  = 4
					0101  = 5
					0110  = 6
					0111  = 7
					1000  = 8
					1001  = 9
					1010  = A
					1011  = B
					1100  = C
					1101  = D
					1110  = E
					1111  = F    15
		
		八进制和十六进制， 十进制和八进制： 
			可以先转换成二进制，再由二进制转换其他进制
			
			6A(十六进制) = 0110 1010 = 2^6 + 2^5 + 2^3 + 2^1 = 64 + 32 + 8 + 2 = 106(十进制)
						 = 6 * 16^1 + 10 = 96+10 = 106
			6A(十六进制) = 0110 1010 = 001 101 010 = 1 5 2 =  152(八进制)
		
			152(八进制) = 001 101 010 = 0110 1010 = 6A(十六进制)
		
			十六进制：颜色#FFAA88
			
		
	
	5，原码， 反码， 补码
	
		用二进制表示数字1 ：
			00000000 00000000 00000000 00000001
		用二进制表示数字-1：
			10000000 00000000 00000000 00000001
	
		原码：用二进制和符号位组成的， 符号位如果为1则表示负数，如果为0表示正数
			
				1 + 1 = 2
			
				00000000 00000000 00000000 00000001
			+	00000000 00000000 00000000 00000001
			--------------------------------------------
				00000000 00000000 00000000 00000010     2(十进制)
			
			
				1 - 2 = -1
				1 + (-2) = -1
				1的原码： 00000000 00000000 00000000 00000001
				-2的原码： 10000000 00000000 00000000 00000010
				
				00000000 00000000 00000000 00000001
			+	10000000 00000000 00000000 00000010
			--------------------------------------------
				10000000 00000000 00000000 00000011    -3(十进制)
		
		
		反码: 
			正数的反码就是原码本身，
			负数的反码：在原码的基础上符号位不变，其他取反
			
			1的反码 ：
				00000000 00000000 00000000 00000001
			-1的反码：
				-1的原码： 10000000 00000000 00000000 00000001
				-1的反码： 11111111 11111111 11111111 11111110
			
			1 - 2 = -1
			1 + (-2) = -1
			1的反码 ：00000000 00000000 00000000 00000001
			-2的反码： 11111111 11111111 11111111 11111101
			
				00000000 00000000 00000000 00000001
			+	11111111 11111111 11111111 11111101
			--------------------------------------------
				11111111 11111111 11111111 11111110  反码
				10000000 00000000 00000000 00000001  原码 -1 
		
			
			1 - 1 = 0
			1 + (-1) = 0
			用反码
			1的反码 ：00000000 00000000 00000000 00000001
			-1的反码: 11111111 11111111 11111111 11111110
				
				00000000 00000000 00000000 00000001
			+	11111111 11111111 11111111 11111110
			--------------------------------------------
				11111111 11111111 11111111 11111111  反码
				10000000 00000000 00000000 00000000  原码 -0 , 符号位不对
			
			
		补码：
			正数的补码就是原码本身
			负数的补码：符号位不变，其他位取反，再+1
			
			1 - 2 = -1
			1 + (-2) = -1
			1的补码 ：00000000 00000000 00000000 00000001
			-2的补码： 11111111 11111111 11111111 11111110
				
				00000000 00000000 00000000 00000001
			+	11111111 11111111 11111111 11111110
			--------------------------------------------
				11111111 11111111 11111111 11111111 补码
				11111111 11111111 11111111 11111110 反码
				10000000 00000000 00000000 00000001 原码 -1
				
			1 - 1 = 0
			1 + (-1) = 0
			用补码
			1的补码 ：00000000 00000000 00000000 00000001
			-1的补码: 11111111 11111111 11111111 11111111
			
				00000000 00000000 00000000 00000001
			+	11111111 11111111 11111111 11111111
			--------------------------------------------
			  1 00000000 00000000 00000000 00000000  补码
			  溢出，舍去
			    00000000 00000000 00000000 00000000  原码
			
		计算机中进行运算的是补码
			
			
		正数： 三码合一，都是原码	
			
			
			
			
		
		
		