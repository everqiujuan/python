

# 写代码
# 两种思想
#
# 面向过程：侧重过程，侧重解决问题的步骤:先执行什么代码，然后再执行什么代码.
#     用函数封装问题中的每个功能，然后按照顺序依次调用即可
#
# 面向对象：侧重对象，侧重解决问题的各个对象，
#     用类来封装对象的属性(变量)和方法(函数)
#
#
# 面向过程的语言: C
# 面向对象的语言: C++，C#, Java, Python, JS, PHP, ....
#
#
#   类(某一类事物，泛指)     对象(具体的一个事物)
#      人                    我
#      电脑                  我的这台电脑,你桌上的那台电脑
#      联想电脑              我的这台联想电脑
#      杯子                  你桌上的那个杯子，我桌上的这个杯子
#     ...
#
# 类是对象的抽象
# 对象是类的具体
#
#  类：
#   作用：创建一个类结构，可以用于创建对象，
#        一个类可以创建任意多个具有相同属性和方法的对象
#        类不占内存
#  对象：
#    必须通过类来创建
#    是类的具体
#    对象占内存
#

# 类 class
# 类名：一般遵守大驼峰
# object: 超类, 最顶级的类，所有类都会继承它
# 父类: 被继承的类, 也叫基类
# 子类: Person，也叫派生类
# class Person(object):
# class Person():

# Person类
class Person:

    # 属性（变量）: 静态的
    name = '笨小鸡'
    age = 18

    # 方法（函数）：动态的，表示功能
    # self: 指向当前类的对象, self是形参名，可以更改，但是一般不改
    def eat(self):
        print("我在吃肯德基")



# 对象
# 创建对象：实例化
# Person:类名
# p:对象
p = Person()
print(p.name)  # 笨小鸡
print(p.age)  # 18
p.eat()  # 我在吃肯德基



















